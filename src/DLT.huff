/// @title DLT
/// @notice SPDX-License-Identifier: MIT
/// @author zakrad <https://github.com/zakrad>
/// @notice Gas efficient Dual Layer Token implementation


// Function Interface
#define function mint(address,uint256,uint256,uint256,bytes) nonpayable returns ()
#define function burn(address,uint256,uint256,uint256) nonpayable returns ()

#define function isApprovedForAll(address,address) view returns (bool)
#define function setApprovalForAll(address,bool) nonpayable returns ()

#define function safeTransferFrom(address,address,uint256,uint256,uint256,bytes) nonpayable returns ()

#define function subBalanceOf(address,uint256,uint256) view returns (uint256)

#define function name() view returns (string)
#define function symbol() view returns (string)

// Events
#define event Transfer(address,address,address,uint256,uint256,uint256)
#define event TransferBatch(address,address,address,uint256[],uint256[],uint256[])
#define event ApprovalForAll(address,address,bool)
#define event URI(string,string,uint256)

/* Storage Slots */
#define constant VALUE_LOCATION = FREE_STORAGE_POINTER()

/* Methods */
#define macro SET_VALUE() = takes (0) returns (0) {
    0x04 calldataload   // [value]
    [VALUE_LOCATION]    // [ptr, value]
    sstore              // []
}

#define macro GET_VALUE() = takes (0) returns (0) {
    // Load value from storage.
    [VALUE_LOCATION]   // [ptr]
    sload                // [value]

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(setValue) eq set jumpi
    dup1 __FUNC_SIG(getValue) eq get jumpi

    0x00 0x00 revert

    set:
        SET_VALUE()
    get:
        GET_VALUE()

}