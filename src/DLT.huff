/// @title DLT
/// @notice SPDX-License-Identifier: MIT
/// @author zakrad <https://github.com/zakrad>
/// @notice Gas efficient Dual Layer Token implementation

// Errors
#define error Error(string)
#define error Panic(uint256)


/* Function Interface */
#define function mint(address,uint256,uint256,uint256,bytes) nonpayable returns ()
#define function burn(address,uint256,uint256,uint256) nonpayable returns ()

#define function isApprovedForAll(address,address) view returns (bool)
#define function setApprovalForAll(address,bool) nonpayable returns ()

#define function safeTransferFrom(address,address,uint256,uint256,uint256,bytes) nonpayable returns ()

#define function subBalanceOf(address,uint256,uint256) view returns (uint256)

#define function name() view returns (string)
#define function symbol() view returns (string)

/* Events */
#define event Transfer(address,address,address,uint256,uint256,uint256)
#define event TransferBatch(address,address,address,uint256[],uint256[],uint256[])
#define event Approval(address,address,uint256,uint256,uint256)
#define event ApprovalForAll(address,address,bool)
#define event URI(string,string,uint256)

/* Storage Slots */
#define constant NAME_LOCATION = FREE_STORAGE_POINTER()
#define constant SYMBOL_LOCATION = FREE_STORAGE_POINTER()
#define constant SUB_BALANCE_LOCATION = FREE_STORAGE_POINTER()
#define constant IS_APPROVED_FOR_ALL_LOCATION = FREE_STORAGE_POINTER()
#define constant ALLOWANCE_LOCATION = FREE_STORAGE_POINTER()
// Constants
// Solidity Panic Codes
#define constant ARITHMETIC_OVERFLOW = 0x11;

// Error Constants
// "NON_PAYABLE" Revert Message String
#define constant NON_PAYABLE_ERROR = 0x4e4f4e5f50415941424c45000000000000000000000000000000000000000000
#define constant NON_PAYABLE_LENGTH = 0x0b
// "UNSAFE_RECIPIENT" Revert Message String
#define constant UNSAFE_RECIPIENT_ERROR = 0x554e534146455f524543495049454e5400000000000000000000000000000000
#define constant UNSAFE_RECIPIENT_LENGTH = 0x10
// "NOT_AUTHORIZED" Revert Message String
#define constant NOT_AUTHORIZED_ERROR = 0x4e4f545f415554484f52495a4544000000000000000000000000000000000000
#define constant NOT_AUTHORIZED_LENGTH = 0x0e

/* Metadata */
// META_NAME = "DualLayerToken"
#define constant META_NAME = 0x4475616c4c61796572546f6b656e000000000000000000000000000000000000
#define constant META_NAME_LENGTH = 0x0e

// META_SYMBOL = "DLT"
#define constant META_SYMBOL = 0x444c540000000000000000000000000000000000000000000000000000000000
#define constant META_SYMBOL_LENGTH = 0x03

// Viewable Function Macros

/// @title Sub Balance Of
/// @notice Entry point for: subBalanceOf(address,uint256,uint256)
/// @dev Slices account and address from calldata and retreives the balance
/// @param {calldata} [address account, uint256 mainId, uint256 subId]
/// @return {return} [uint256 subBalance]
#define macro SUB_BALANCE_OF() = takes (0) returns(0) {
    NON_PAYABLE()
    0x44 calldataload                               // [subId]
    0x24 calldataload                               // [mainId, subId]
    0x04 calldataload                               // [account, mainid, subId]

    GET_SUB_BALANCE_SLOT(0x00)                      // [slot]
    sload                                           // [balance]
    0x00 mstore                                     // [] load into mem
    0x20 0x00 return                                // [] return 32 bytes
}

/// @title Name
/// @notice Returns the name of the contract
/// @param []
/// @return {return} [string]
#define macro NAME() = takes (0) returns (0) {
    NON_PAYABLE()
    0x20 0x00 mstore                    // []
    [META_NAME_LENGTH] 0x20 mstore      // []
    [META_NAME] 0x40 mstore             // []
    0x60 0x00 return                    // []
}

/// @title Symbol
/// @notice Gets the symbol of the contract
/// @param []
/// @return {return} [string]
#define macro SYMBOL() = takes (0) returns (0) {
    NON_PAYABLE()                       // []
    0x20 0x00 mstore                    // []
    [META_SYMBOL_LENGTH] 0x20 mstore    // []
    [META_SYMBOL] 0x40 mstore           // []
    0x60 0x00 return                    // []
}

/// @title Is Approved For All
/// @notice Getter method for approval mapping
/// @param {calldata} [address owner, address operator]
/// @return {approved} [bool]
#define macro IS_APPROVED_FOR_ALL() = takes (0) returns (0) {
    0x24 calldataload                 // [operator]
    0x04 calldataload                 // [owner, operator]

    GET_APPROVAL_FOR_ALL_SLOT(0x00)    // [slot]

    sload                              //[value]

    0x00 mstore
    0x20 0x00 return
}


// External State Modifying Macro Functions

/// @title Set Approval for All
/// @notice Set Approval for All tokens for the provided account
/// @dev Modifies mapping(adddress => mapping(address => bool)) for a given account
/// @param {calldata} [address operator, bool approved]
/// @return []
#define macro SET_APPROVAL_FOR_ALL() = takes (0) returns(0){
    0x24 calldataload                   // [approved]

    // store approved in memory for the log
    dup1 0x00 mstore                    // [approved]

    0x04 calldataload                   // [operator, approved]
    caller                              // [msg.sender, operator, approved]

    // duplicate for reuse in storage slot calculation
    dup2 dup2                           // [msg.sender, operator, msg.sender, operator, approved]

    // emit ApprovalForAll(msg.sender, operator, approved)
    __EVENT_HASH(ApprovalForAll)        // [sig, msg.sender, operator, msg.sender, operator, approved]
    0x20 0x00                           // [offset, size, sig, msg.sender, operator, msg.sender, operator, approved]
    log3                                // [msg.sender, operator, approved]

    GET_APPROVAL_FOR_ALL_SLOT(0x00)    // [slot, approved]

    sstore

    // Stop the execution flow
    stop
}

/// @title Mint
/// @notice Mint sub id balance to the given account
/// @notice This method does NOT check for any paid ether or remaining supply
/// @notice Increase the balance of the msg.sender for the given mainId, subId and amount.
/// @param {calldata} [uint256 account, uint256 mainId, uint256 subId, uint256 amount, bytes data]
/// @return []
#define macro MINT() = takes (0) returns (0) {
    // increase the balance of the address
    0x64 calldataload               // [amount]

    // store for log
    dup1 0x80 mstore                // [amount]

    0x44 calldataload               // [subId, amount]

    // store for log
    dup1 0x60 mstore                // [subId, amount]

    0x24 calldataload               // [mainId, subId, amount]

    // store for log
    dup1 0x40 mstore                // [mainId, subId, amount]

    0x04 calldataload               // [to, mainId, subId, amount]

    // Increase the balance of the to account
    // takes: [to, mainId, subId, amount]
    INCREASE_BALANCE(0x00)

    // emit transfer event
    0x04 calldataload dup1          // [to, to]
    0x00                            // [zero_address, to, to]
    caller                          // [msg.sender, zero_address, to, to]

    __EVENT_HASH(Transfer)          // [sig, msg.sender, zero_address, to, to]

    0x40 0x60                       // [offset, size, Transfer, msg.sender, address(0), to, to]
    log4                            // [to]

    0x00                            // [from, to]
    0x04                            // [&ids, from, to]
    swap2

    // [to, from, &ids]
    SAFE_CALL()
}



// Helper Macros
// NOTE: Execution flow does not need to stop at the end of these macros

/// @title Get Sub Balance Of
/// @notice Get the balance of a token sub id for a given main id and account.
/// @dev Uses a 2 level nested mapping for getting values 
/// @param {stack} [account, mainId, subId]
/// @return {stack} [balance]
#define macro GET_SUB_BALANCE_SLOT(mem_ptr) = takes (3) returns (1) {
    // input stack: [account, mainId, subId]
    [SUB_BALANCE_LOCATION]            // [SUB_BALANCE_LOCATION, account, mainId, subId]
    <mem_ptr> 0x20 add                // [<mem_ptr> + 32, SUB_BALANCE_LOCATION, account, mainId, subId]
    mstore                            // [account, mainId, subId]
    <mem_ptr> swap1 dup2              // [<mem_ptr>, account, <mem_ptr>, mainId, subId]
    mstore                            // [<mem_ptr>, mainId, subId]
    0x40 dup2                         // [<mem_ptr>, 0x40, <mem_ptr>, mainId, subId]
    sha3                              // [slot1, <mem_ptr>, mainId, subId]

    //concat mainId
    dup2 0x20 add                     // [<mem_ptr> +32, slot1, <mem_ptr>, mainId, subId]
    mstore                            // [<mem_ptr>, mainId, subId]
    swap1 dup2                        // [<mem_ptr>, mainId, <mem_ptr>, subId]
    mstore                            // [<mem_ptr>, subId]
    0x40 dup2                         // [<mem_ptr>, 0x40, <mem_ptr>, subId] 
    sha3                              // [slot2, <mem_ptr>, subId] 

    //concat subId
    dup2 0x20 add                     // [<mem_ptr> +32, slot2, <mem_ptr>, subId]
    mstore                            // [<mem_ptr>, subId]
    swap1 dup2                        // [<mem_ptr>, subId, <mem_ptr>]
    mstore                            // [<mem_ptr>]
    0x40 swap1                        // [<mem_ptr>, 0x40]
    sha3                              // [slot3] 
}


/// @notice Get slot for set approval for all
#define macro GET_APPROVAL_FOR_ALL_SLOT(mem_ptr) = takes(2) returns (1) {
    // Input stack: [key1, key2]
    [IS_APPROVED_FOR_ALL_LOCATION]      // [slot, msg.sender, operator]
    <mem_ptr> 0x20 add           // [<mem_ptr> + 32, slot, msg.sender, operator]
    mstore                      // [msg.sender, operator] 
    <mem_ptr> swap1 dup2        // [<mem_ptr>, msg.sender, <mem_ptr>, operator] 
    mstore

    dup1                        // [<mem_ptr>, <mem_ptr>, operator]
    0x40 swap1                  // [<mem_ptr>, 0x40, <mem_ptr>, operator]
    sha3                        // [slot, <mem_ptr>, operator]

    dup2 0x20 add               // [<mem_ptr> + 32, slot, <mem_ptr>, operator]
    mstore 
    swap1 dup2                   // [<mem_ptr>, operator, <mem_ptr>]
    mstore                       // [<mem_ptr>]

    0x40 swap1                   // [<mem_ptr>, 0x40]
    sha3                         // [slot]

}

/// @title Decrease Sub Id Balance
/// @notice Decreases the balance by amount of a given account for the given mianId and subId
/// @param {stack} [address from, uint256 mainId, uint256 subId, uint256 amount]
/// @return []
#define macro DECREASE_BALANCE() = takes (4) returns (0) {
    // takes 3 [from, mainId, subId, amount]

    GET_SUB_BALANCE_SLOT(0x00)      // [slot, amount]
    dup1                            // [slot,slot,amount]
    sload                           // [bal, slot, amount]
    swap1                           // [slot, bal, amount]
    swap2                           // [amount, bal, slot]
    swap1                           // [bal, amount, slot]

    // Safe sub balance to revert on underflow
    SAFE_SUB()                      // [(bal-amount), slot]

    // Store decreased balance
    swap1                           // [slot, (bal-amount)]
    sstore                          // []
}

/// @title Increase Balance
/// @notice Increases the balance by amount of a given account for the given mianId and subId
/// @param {stack} [address to, uint256 mainId, uint256 subId, uint256 amount]
/// @return []
#define macro INCREASE_BALANCE() = takes (4) returns (0) {
    // input stack: [to, mainId, subId, amount]

    GET_SUB_BALANCE_SLOT(0x00)     // [slot, amount]
    dup1                            // [slot, slot,amount]
    sload                           // [bal, slot, amount]
    swap1                           // [slot, bal, amount]
    swap2                           // [amount, bal, slot]

    // Safe sub balance to revert on overflow
    SAFE_ADD()                      // [(bal+amount), slot]

    // Store decreased balance
    swap1                           // [slot, (bal+amount)]
    sstore                          // []
}

/// @title Safe Call
/// @notice Performs safe call hook for functions that are transfering single asserts (i.e. not batch transfers)
/// @dev Copies calldata into a buffer for to forward to the receiving contract - panics if selector is not returned
/// @dev If the sender is an EOA this is skipped
/// @param {stack} [address to, address from, uint256 &ids]
/// @return []
#define macro SAFE_CALL() = takes (3) returns (0) {
    // input stack: [to, from, &ids]

    // safe transfer if the contract to has code

    dup1                            // [to, to, from, &ids]
    extcodesize                     // [codesize(to), to, to, from, &ids]
    iszero                          // [!(codesize(to)), to, to, from, &ids]
    iszero                          // [!!(codesize(to)), to, to, from, &ids]

    // Jump to do safe check if the caller is a contract
    isContract jumpi                // [to, to, from, &ids]

    // check for zero address, if sent to the zero address revert, otherwise fin
    iszero                          // [!to, to, from, &ids]
    unsafe jumpi                    // [to, from, &ids]
    continue jump                   // [to, from, &ids]

    isContract:
        // make external call to contract
        // get data

        // get value
        calldatasize                    // [cds, to, from, &ids]

        0x19a36752 0xE0 shl             // [selector, cds, to, from, &ids]
        dup1 0x20 mstore                // [selector, cds, to, from, &ids]

        dup5 dup3 sub                   // [(cds-4), selector, cds, to, from, &ids]
        dup6                            // [0x04, (cds-4), selector, cds, to, from, &ids]
        0x44                            // [0x44, 0x04, (cds-4), selector, cds, to, from, &ids]
        calldatacopy                    // [selector, cds, to, from, &ids]

        // store caller(operator) in first calldata slot
        caller 0x24 mstore              // [selector, cds, to, from, &ids]

        // store from, in the second
        dup4 0x44 mstore                // [selector, cds, to, from, &ids]]

        // This macro is used for both safeMint and for safeTransferFrom, the following section is only required when calling from mint, as an extra address
        // parameter is needed when calling the onReceive function on the receiving contract, as safeTransferFrom already has an extra address parameter no 
        // resizing of dynamic data pointers are required.
        // We can check if this is coming from mint or safeTransferFrom by checking if the from value on the stack is the zero address or not
        dup4 iszero iszero skipResize jumpi

        // update location of the bytes calldata
        0xc0 0xc4 mstore

        // increase calldatasize value by 0x20, when minting
        swap1                           // [cds, selector, to, from, &ids]
        0x20 add                        // [cds+0x20, selector, to, from, &ids]
        swap1                           // [selector, cds+0x20, to, from, &ids]

    skipResize:
        // using scratch space as return data space as we know it will NOT be used.
        // clear return space in preparation for the call
        0x00 dup1 mstore                // [selector, cds, to, from, &ids]

        // call
        0x20                            // [retSize, selector, cds, to, from, &ids]                                                   retSize: 0x04
        0x00                            // [retOffset, retSize, selector, cds, to, from, &ids]                                        retOffset: 0x00
        dup4                            // [argSize, retOffset, retSize, selector, cds, to, from, &ids]                               argSize: calldatasize + 20 // we add one more address into the mix    
        0x20                            // [argOffset, argSize, retOffset, retSize, selector, cds, to, from, &ids]                    argOffset: 0x20            // read the args from 0x20
        0x00                            // [value, argOffset, argSize, retOffset, retSize, selector, cds, to, from, &ids]             value: 0x00                // send no ether
        dup8                            // [to, value, argOffset, argSize, retOffset, retSize, selector, cds, to, from, &ids]         to: to                     // send to the to address
        gas                             // [gas, to, value, argOffset, argSize, retOffset, retSize, selector, cds, to, from, &ids]    gas: gas                   // forward all gas    

        call                            // [success, selector, cds, to, from, &ids]                                                   call

        // error if call reverts
        iszero error jumpi

        // read response
        0x00 mload 0xE0 shr             // [response]
        0x19a36752                      // [selector, response]
        eq iszero unsafe jumpi          // If the selector and the response are not equal, error

    continue:
        stop                            // execution completed successfully

    unsafe:
        UNSAFE_RECIPIENT(0x00)

    error:
        0x00 dup1 revert
}


/// @notice Adds two numbers and reverts on overflow
#define macro SAFE_ADD() = takes (2) returns (1) {
    // input stack          // [num1, num2]
    dup2                    // [num2, num1, num2]
    add                     // [result, num2]
    dup1                    // [result, result, num2]
    swap2                   // [num2, result, result]
    gt                      // [is_overflow, result]
    iszero                  // [is_not_overflow, result]
    is_not_overflow jumpi   // [result]
        [ARITHMETIC_OVERFLOW] PANIC()
    is_not_overflow:        // [result]
}

/// @notice Subtracts two numbers and reverts on underflow
#define macro SAFE_SUB() = takes (2) returns (1) {
    // input stack          // [num1, num2]
    dup1                    // [num1, num1, num2]
    dup3                    // [num2, num1, num1, num2]
    gt                      // [is_underflow, num1, num2]
    iszero                  // [is_not_underflow, num1, num2]
    is_not_underflow jumpi  // [num1, num2]
        [ARITHMETIC_OVERFLOW] PANIC()
    is_not_underflow:       // [num1, num2]
    sub                     // [result]
}

/*

Solidity Panic.

MEMORY LAYOUT WHEN THROWN
| sig     || panic code                                                     |
0x4e487b71  0000000000000000000000000000000000000000000000000000000000000001

*/
#define macro PANIC() = takes (1) returns (0) {
    // takes:       // [panic_code]
    __ERROR(Panic)  // [panic_sig, panic_code]
    0x00            // [panic_sig_offset, panic_sig, panic_code]
    mstore          // [panic_code]
    0x04            // [panic_code_offset, panic_code]
    mstore          // []
    0x24            // [revert_size]
    0x00            // [revert_offset, revert_size]
    revert          // []
}

/*

Solidity Require. Error `string` MUST be no greater than 32 bytes.

MEMORY LAYOUT WHEN THROWN
| sig    || message offset                                                 || message length                                                 || message "revert"                                               |
0x08c379a  0000000000000000000000000000000000000000000000000000000000000020  0000000000000000000000000000000000000000000000000000000000000006  7265766572740000000000000000000000000000000000000000000000000000

*/
#define macro REQUIRE() = takes (3) returns (0) {
    // takes:       // [condition, message_length, message]
    do_not_throw    // [do_not_throw_jumpdest, condition, message_length, message]
    jumpi           // [message_length, message]
    __ERROR(Error)  // [error_sig, , message_length, message]
    0x00            // [mem_ptr, error_sig, message_length, message]
    mstore          // [message_length, message]
    0x20            // [message_offset, message_length, message]
    0x04            // [message_offset_ptr, message_offset, message_length, message]
    mstore          // [message_length, message]
    0x24            // [message_length_ptr, message_length, message]
    mstore          // [message]
    0x44            // [message_ptr, message]
    mstore          // []
    0x80            // [size]
    0x00            // [offset, size]
    revert          // []
    do_not_throw:   // [message_length, message]
        pop         // [message]
        pop         // []
}

/// @notice Reverts if the call has a non-zero value
/// @notice Reverts with message "NON_PAYABLE"
#define macro NON_PAYABLE() = takes (0) returns (0) {
    [NON_PAYABLE_ERROR]      // ["NON_PAYABLE"]
    [NON_PAYABLE_LENGTH]     // [11 (length), "NON_PAYABLE"]
    callvalue iszero         // [msg.value == 0, 11 (length), "NON_PAYABLE"]
    REQUIRE()                // []
}

/// @notice Reverts with an "UNSAFE_RECIPIENT" message if condition is false
#define macro UNSAFE_RECIPIENT(condition) = takes (0) returns (0) {
    [UNSAFE_RECIPIENT_ERROR]    // ["UNSAFE_RECIPIENT"]
    [UNSAFE_RECIPIENT_LENGTH]   // [16 (length), "UNSAFE_RECIPIENT"]
    <condition>                 // [condition, 16 (length), "UNSAFE_RECIPIENT"]
    REQUIRE()                   // []
}


/* Methods */
#define macro SET_VALUE() = takes (0) returns (0) {
    0x04 calldataload   // [value]
    [VALUE_LOCATION]    // [ptr, value]
    sstore              // []
}

#define macro GET_VALUE() = takes (0) returns (0) {
    // Load value from storage.
    [VALUE_LOCATION]   // [ptr]
    sload                // [value]

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(setValue) eq set jumpi
    dup1 __FUNC_SIG(getValue) eq get jumpi

    0x00 0x00 revert

    set:
        SET_VALUE()
    get:
        GET_VALUE()

}